/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/user": {
    get: operations["getUser"];
  };
  "/user/register": {
    post: operations["registerUser"];
  };
  "/user/login": {
    post: operations["loginUser"];
  };
  "/categories": {
    get: operations["allCategories"];
    /** ADMIN */
    post: operations["createCategory"];
  };
  "/categories/{id}": {
    get: operations["categoryById"];
    /** ADMIN */
    put: operations["updateCategory"];
    /** ADMIN */
    delete: operations["deleteCategory"];
  };
  "/brands": {
    get: operations["allBrands"];
    /** ADMIN */
    post: operations["createBrand"];
  };
  "/brands/{id}": {
    get: operations["brandById"];
    /** ADMIN */
    put: operations["updateBrand"];
    /** ADMIN */
    delete: operations["deleteBrand"];
  };
  "/products": {
    get: operations["allProducts"];
    /** ADMIN */
    post: operations["createProduct"];
  };
  "/products/{id}": {
    get: operations["productById"];
    /** ADMIN */
    put: operations["updateProduct"];
    /** ADMIN */
    delete: operations["deleteProduct"];
  };
  "/orders": {
    get: operations["allOrders"];
    post: operations["createOrder"];
  };
  "/orders/{id}": {
    get: operations["getOrder"];
    /** ADMIN */
    delete: operations["deleteOrder"];
  };
  "/orders/{id}/pay": {
    post: operations["payOrder"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Brand: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      image_url: string;
    };
    BrandBody: {
      name: string;
      description?: string;
      image_url: string;
    };
    Category: {
      /** Format: int64 */
      id: number;
      name: string;
      description?: string;
      image_url: string;
    };
    CategoryBody: {
      name: string;
      description?: string;
      image_url: string;
    };
    LoginUserBody: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
    };
    Order: {
      /** Format: int64 */
      id: number;
      /** Format: naive-date-time */
      order_date: string;
      /** Format: double */
      total_price: number;
      status: components["schemas"]["OrderStatus"];
    };
    OrderBody: {
      items: components["schemas"]["OrderItem"][];
    };
    OrderItem: {
      /** Format: int64 */
      quantity: number;
      /** Format: int64 */
      product_id: number;
    };
    /** @enum {string} */
    OrderStatus: "Pending" | "Paid" | "Shipped" | "Delivered" | "Cancelled";
    Payment: {
      payment_method: string;
      /** Format: naive-date-time */
      payment_date: string;
    };
    PaymentBody: {
      payment_method: string;
    };
    Product: {
      /** Format: int64 */
      id: number;
      name: string;
      description: string;
      image_url: string;
      /** Format: double */
      price: number;
      /** Format: int64 */
      stock_quantity: number;
      /** Format: naive-date-time */
      created_at: string;
      brand: components["schemas"]["Brand"];
      category: components["schemas"]["Category"];
    };
    ProductBody: {
      name: string;
      description: string;
      image_url: string;
      /** Format: double */
      price: number;
      /** Format: int64 */
      stock_quantity: number;
      /** Format: int64 */
      brand_id: number;
      /** Format: int64 */
      category_id: number;
    };
    RegisterUserBody: {
      /** Format: email */
      email: string;
      /** Format: password */
      password: string;
      first_name: string;
      last_name: string;
      street: string;
      postal_code: string;
      city: string;
      /** @description Make new user admin, ONLY for testing purposes, would be removed in a real application */
      is_admin: boolean;
    };
    /** @enum {string} */
    SortBy: "Created" | "Price" | "Name";
    /** @enum {string} */
    SortDirection: "Ascending" | "Descending";
    SpecificOrder: {
      /** Format: int64 */
      id: number;
      /** Format: naive-date-time */
      order_date: string;
      /** Format: double */
      total_price: number;
      status: components["schemas"]["OrderStatus"];
      items: components["schemas"]["OrderItem"][];
      payment?: components["schemas"]["Payment"];
    };
    User: {
      /** Format: int64 */
      id: number;
      email: string;
      first_name: string;
      last_name: string;
      street: string;
      postal_code: string;
      city: string;
      is_admin: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getUser: {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["User"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  registerUser: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["RegisterUserBody"];
      };
    };
    responses: {
      /** @description The user has been successfully registered, and authentication token is returned */
      200: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
      /** @description A user with the given email already exists */
      409: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  loginUser: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["LoginUserBody"];
      };
    };
    responses: {
      /** @description Successfully logged in, and authentication token is returned */
      200: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
      /** @description Wrong email or password */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  allCategories: {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Category"][];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  createCategory: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CategoryBody"];
      };
    };
    responses: {
      /** @description Returns the ID of the created category */
      201: {
        content: {
          "application/json; charset=utf-8": number;
        };
      };
      /** @description The user is not authorized to create a category */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  categoryById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Category"];
        };
      };
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  updateCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["CategoryBody"];
      };
    };
    responses: {
      /** @description The category has been successfully updated */
      204: {
        content: never;
      };
      /** @description The user is not authorized to update a category */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  deleteCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The category has been successfully deleted */
      204: {
        content: never;
      };
      /** @description The user is not authorized to delete a category */
      401: {
        content: never;
      };
      /** @description The category with the given ID does not exist */
      404: {
        content: never;
      };
      /** @description The category is in use and cannot be deleted */
      409: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  allBrands: {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Brand"][];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  createBrand: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["BrandBody"];
      };
    };
    responses: {
      /** @description Returns the ID of the created brand */
      201: {
        content: {
          "application/json; charset=utf-8": number;
        };
      };
      /** @description The user is not authorized to create a brand */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  brandById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Brand"];
        };
      };
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  updateBrand: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["BrandBody"];
      };
    };
    responses: {
      /** @description The brand has been successfully updated */
      204: {
        content: never;
      };
      /** @description The user is not authorized to update a brand */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  deleteBrand: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The brand has been successfully deleted */
      204: {
        content: never;
      };
      /** @description The user is not authorized to delete a brand */
      401: {
        content: never;
      };
      /** @description The brand with the given ID does not exist */
      404: {
        content: never;
      };
      /** @description The brand is in use and cannot be deleted */
      409: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  allProducts: {
    parameters: {
      query?: {
        /** @description Filter products by specific category */
        category_id?: number;
        /** @description Filter products by specific brand */
        brand_id?: number;
        /** @description Search products by name */
        search?: string;
        /** @description Sort products */
        sort_by?: components["schemas"]["SortBy"];
        /** @description Sort direction */
        sort_direction?: components["schemas"]["SortDirection"];
        /** @description Amount of products to query */
        take?: number;
        /** @description Skip amount of products */
        skip?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Product"][];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  createProduct: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ProductBody"];
      };
    };
    responses: {
      /** @description Returns the ID of the created product */
      201: {
        content: {
          "application/json; charset=utf-8": number;
        };
      };
      /** @description The user is not authorized to create a product */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  productById: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Product"];
        };
      };
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  updateProduct: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ProductBody"];
      };
    };
    responses: {
      /** @description The product has been successfully updated */
      204: {
        content: never;
      };
      /** @description The user is not authorized to update a product */
      401: {
        content: never;
      };
      /** @description The product does not exist */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  deleteProduct: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The product has been successfully deleted */
      204: {
        content: never;
      };
      /** @description The user is not authorized to delete a product */
      401: {
        content: never;
      };
      /** @description The product does not exist */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  allOrders: {
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["Order"][];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  createOrder: {
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["OrderBody"];
      };
    };
    responses: {
      /** @description Created order, returns the order id */
      201: {
        content: {
          "application/json; charset=utf-8": number;
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  getOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json; charset=utf-8": components["schemas"]["SpecificOrder"];
        };
      };
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  /** ADMIN */
  deleteOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description The order has been successfully deleted */
      204: {
        content: never;
      };
      /** @description The user is not authorized to delete a order */
      401: {
        content: never;
      };
      /** @description The order with the given ID does not exist */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
  payOrder: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["PaymentBody"];
      };
    };
    responses: {
      /** @description Payment successful */
      201: {
        content: never;
      };
      /** @description Payment failed, the order is already paid for */
      400: {
        content: never;
      };
      /** @description Order not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: {
          "text/plain; charset=utf-8": string;
        };
      };
    };
  };
}
