// This file is auto-generated by @hey-api/openapi-ts

export const $Brand = {
    type: 'object',
    required: ['id', 'name'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $BrandBody = {
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        description: {
            type: 'string',
            maxLength: 65535,
            minLength: 1
        }
    }
} as const;

export const $Category = {
    type: 'object',
    required: ['id', 'name'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        }
    }
} as const;

export const $CategoryBody = {
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        description: {
            type: 'string',
            maxLength: 65535,
            minLength: 1
        }
    }
} as const;

export const $LoginUserBody = {
    type: 'object',
    required: ['email', 'password'],
    properties: {
        email: {
            type: 'string',
            format: 'email'
        },
        password: {
            type: 'string',
            format: 'password'
        }
    }
} as const;

export const $Order = {
    type: 'object',
    required: ['id', 'order_date', 'total_price', 'status'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        order_date: {
            type: 'string',
            format: 'naive-date-time'
        },
        total_price: {
            type: 'number',
            format: 'double'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        }
    }
} as const;

export const $OrderBody = {
    type: 'object',
    required: ['items'],
    properties: {
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItem'
            }
        }
    }
} as const;

export const $OrderItem = {
    type: 'object',
    required: ['quantity', 'product_id'],
    properties: {
        quantity: {
            type: 'integer',
            format: 'int64',
            minimum: 1
        },
        product_id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $OrderStatus = {
    type: 'string',
    enum: ['Pending', 'Paid', 'Shipped', 'Delivered', 'Cancelled']
} as const;

export const $Payment = {
    type: 'object',
    required: ['payment_method', 'payment_date', 'status'],
    properties: {
        payment_method: {
            type: 'string'
        },
        payment_date: {
            type: 'string',
            format: 'naive-date-time'
        },
        status: {
            '$ref': '#/components/schemas/PaymentStatus'
        }
    }
} as const;

export const $PaymentBody = {
    type: 'object',
    required: ['payment_method'],
    properties: {
        payment_method: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        }
    }
} as const;

export const $PaymentStatus = {
    type: 'string',
    enum: ['Pending', 'Paid', 'Failed']
} as const;

export const $Product = {
    type: 'object',
    required: ['id', 'name', 'description', 'image_url', 'price', 'stock_quantity', 'created_at', 'brand', 'category'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        name: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        image_url: {
            type: 'string'
        },
        price: {
            type: 'number',
            format: 'double'
        },
        stock_quantity: {
            type: 'integer',
            format: 'int64'
        },
        created_at: {
            type: 'string',
            format: 'naive-date-time'
        },
        brand: {
            '$ref': '#/components/schemas/Brand'
        },
        category: {
            '$ref': '#/components/schemas/Category'
        }
    }
} as const;

export const $ProductBody = {
    type: 'object',
    required: ['name', 'description', 'image_url', 'price', 'stock_quantity', 'brand_id', 'category_id'],
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        description: {
            type: 'string',
            maxLength: 65535,
            minLength: 1
        },
        image_url: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        price: {
            type: 'number',
            format: 'double',
            minimum: 0
        },
        stock_quantity: {
            type: 'integer',
            format: 'int64',
            minimum: 0
        },
        brand_id: {
            type: 'integer',
            format: 'int64'
        },
        category_id: {
            type: 'integer',
            format: 'int64'
        }
    }
} as const;

export const $ReigsterUserBody = {
    type: 'object',
    required: ['email', 'password', 'first_name', 'last_name', 'street', 'postal_code', 'city', 'is_admin'],
    properties: {
        email: {
            type: 'string',
            format: 'email',
            maxLength: 255,
            minLength: 1
        },
        password: {
            type: 'string',
            format: 'password',
            maxLength: 255,
            minLength: 1
        },
        first_name: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        last_name: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        street: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        postal_code: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        city: {
            type: 'string',
            maxLength: 255,
            minLength: 1
        },
        is_admin: {
            type: 'boolean',
            description: 'Make new user admin, ONLY for testing purposes, would be removed in a real application'
        }
    }
} as const;

export const $SortBy = {
    type: 'string',
    enum: ['Created', 'Price', 'Name']
} as const;

export const $SortDirection = {
    type: 'string',
    enum: ['Ascending', 'Descending']
} as const;

export const $SpecificOrder = {
    type: 'object',
    required: ['id', 'order_date', 'total_price', 'status', 'items'],
    properties: {
        id: {
            type: 'integer',
            format: 'int64'
        },
        order_date: {
            type: 'string',
            format: 'naive-date-time'
        },
        total_price: {
            type: 'number',
            format: 'double'
        },
        status: {
            '$ref': '#/components/schemas/OrderStatus'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/OrderItem'
            }
        },
        payment: {
            '$ref': '#/components/schemas/Payment'
        }
    }
} as const;