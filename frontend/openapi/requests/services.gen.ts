// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PostUserRegisterData, PostUserRegisterResponse, PostUserLoginData, PostUserLoginResponse, GetCategoriesResponse, PostCategoriesData, PostCategoriesResponse, GetCategoriesByIdData, GetCategoriesByIdResponse, PutCategoriesByIdData, PutCategoriesByIdResponse, DeleteCategoriesByIdData, DeleteCategoriesByIdResponse, GetBrandsResponse, PostBrandsData, PostBrandsResponse, GetBrandsByIdData, GetBrandsByIdResponse, PutBrandsByIdData, PutBrandsByIdResponse, DeleteBrandsByIdData, DeleteBrandsByIdResponse, GetProductsData, GetProductsResponse, PostProductsData, PostProductsResponse, GetProductsByIdData, GetProductsByIdResponse, PutProductsByIdData, PutProductsByIdResponse, DeleteProductsByIdData, DeleteProductsByIdResponse, GetOrdersResponse, PostOrdersData, PostOrdersResponse, GetOrdersByIdData, GetOrdersByIdResponse, DeleteOrdersByIdData, DeleteOrdersByIdResponse, PostOrdersByIdPayData, PostOrdersByIdPayResponse } from './types.gen';

export class UserService {
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string The user has been successfully registered, and authentication token is returned
     * @throws ApiError
     */
    public static postUserRegister(data: PostUserRegisterData): CancelablePromise<PostUserRegisterResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/user/register',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                409: 'A user with the given email already exists',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns string Successfully logged in, and authentication token is returned
     * @throws ApiError
     */
    public static postUserLogin(data: PostUserLoginData): CancelablePromise<PostUserLoginResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/user/login',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'Wrong email or password',
                500: 'Internal server error'
            }
        });
    }
    
}

export class CategoryService {
    /**
     * @returns Category
     * @throws ApiError
     */
    public static getCategories(): CancelablePromise<GetCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories',
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number Returns the ID of the created category
     * @throws ApiError
     */
    public static postCategories(data: PostCategoriesData): CancelablePromise<PostCategoriesResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/categories',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to create a category',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Category
     * @throws ApiError
     */
    public static getCategoriesById(data: GetCategoriesByIdData): CancelablePromise<GetCategoriesByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/categories/{id}',
            path: {
                id: data.id
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns void The category has been successfully updated
     * @throws ApiError
     */
    public static putCategoriesById(data: PutCategoriesByIdData): CancelablePromise<PutCategoriesByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/categories/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to update a category',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @returns void The category has been successfully deleted
     * @throws ApiError
     */
    public static deleteCategoriesById(data: DeleteCategoriesByIdData): CancelablePromise<DeleteCategoriesByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/categories/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The user is not authorized to delete a category',
                404: 'The category with the given ID does not exist',
                409: 'The category is in use and cannot be deleted',
                500: 'Internal server error'
            }
        });
    }
    
}

export class BrandService {
    /**
     * @returns Brand
     * @throws ApiError
     */
    public static getBrands(): CancelablePromise<GetBrandsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/brands',
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number Returns the ID of the created brand
     * @throws ApiError
     */
    public static postBrands(data: PostBrandsData): CancelablePromise<PostBrandsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/brands',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to create a brand',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Brand
     * @throws ApiError
     */
    public static getBrandsById(data: GetBrandsByIdData): CancelablePromise<GetBrandsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/brands/{id}',
            path: {
                id: data.id
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns void The brand has been successfully updated
     * @throws ApiError
     */
    public static putBrandsById(data: PutBrandsByIdData): CancelablePromise<PutBrandsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/brands/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to update a brand',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @returns void The brand has been successfully deleted
     * @throws ApiError
     */
    public static deleteBrandsById(data: DeleteBrandsByIdData): CancelablePromise<DeleteBrandsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/brands/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The user is not authorized to delete a brand',
                404: 'The brand with the given ID does not exist',
                409: 'The brand is in use and cannot be deleted',
                500: 'Internal server error'
            }
        });
    }
    
}

export class ProductService {
    /**
     * @param data The data for the request.
     * @param data.search Search products by name
     * @param data.sortBy Sort products
     * @param data.sortDirection Sort direction
     * @param data.take Amount of products to query
     * @param data.skip Skip amount of products
     * @returns Product
     * @throws ApiError
     */
    public static getProducts(data: GetProductsData = {}): CancelablePromise<GetProductsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/products',
            query: {
                search: data.search,
                sort_by: data.sortBy,
                sort_direction: data.sortDirection,
                take: data.take,
                skip: data.skip
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number Returns the ID of the created product
     * @throws ApiError
     */
    public static postProducts(data: PostProductsData): CancelablePromise<PostProductsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/products',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to create a product',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns Product
     * @throws ApiError
     */
    public static getProductsById(data: GetProductsByIdData): CancelablePromise<GetProductsByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns void The product has been successfully updated
     * @throws ApiError
     */
    public static putProductsById(data: PutProductsByIdData): CancelablePromise<PutProductsByIdResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                401: 'The user is not authorized to update a product',
                404: 'The product does not exist',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @returns void The product has been successfully deleted
     * @throws ApiError
     */
    public static deleteProductsById(data: DeleteProductsByIdData): CancelablePromise<DeleteProductsByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/products/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The user is not authorized to delete a product',
                404: 'The product does not exist',
                500: 'Internal server error'
            }
        });
    }
    
}

export class OrderService {
    /**
     * @returns Order
     * @throws ApiError
     */
    public static getOrders(): CancelablePromise<GetOrdersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/orders',
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.requestBody
     * @returns number Created order, returns the order id
     * @throws ApiError
     */
    public static postOrders(data: PostOrdersData): CancelablePromise<PostOrdersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/orders',
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @returns SpecificOrder
     * @throws ApiError
     */
    public static getOrdersById(data: GetOrdersByIdData): CancelablePromise<GetOrdersByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/orders/{id}',
            path: {
                id: data.id
            },
            errors: {
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * ADMIN
     * @param data The data for the request.
     * @param data.id
     * @returns void The order has been successfully deleted
     * @throws ApiError
     */
    public static deleteOrdersById(data: DeleteOrdersByIdData): CancelablePromise<DeleteOrdersByIdResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/orders/{id}',
            path: {
                id: data.id
            },
            errors: {
                401: 'The user is not authorized to delete a order',
                404: 'The order with the given ID does not exist',
                500: 'Internal server error'
            }
        });
    }
    
    /**
     * @param data The data for the request.
     * @param data.id
     * @param data.requestBody
     * @returns unknown Payment successful
     * @throws ApiError
     */
    public static postOrdersByIdPay(data: PostOrdersByIdPayData): CancelablePromise<PostOrdersByIdPayResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/orders/{id}/pay',
            path: {
                id: data.id
            },
            body: data.requestBody,
            mediaType: 'application/json; charset=utf-8',
            errors: {
                400: 'Payment failed, the order is already paid for',
                404: 'Order not found',
                500: 'Internal server error'
            }
        });
    }
    
}