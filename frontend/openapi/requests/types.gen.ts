// This file is auto-generated by @hey-api/openapi-ts

export type Brand = {
    id: number;
    name: string;
    description?: string;
};

export type BrandBody = {
    name: string;
    description?: string;
};

export type Category = {
    id: number;
    name: string;
    description?: string;
};

export type CategoryBody = {
    name: string;
    description?: string;
};

export type LoginUserBody = {
    email: string;
    password: string;
};

export type Order = {
    id: number;
    order_date: string;
    total_price: number;
    status: OrderStatus;
};

export type OrderBody = {
    items: Array<OrderItem>;
};

export type OrderItem = {
    quantity: number;
    product_id: number;
};

export type OrderStatus = 'Pending' | 'Paid' | 'Shipped' | 'Delivered' | 'Cancelled';

export type Payment = {
    payment_method: string;
    payment_date: string;
    status: PaymentStatus;
};

export type PaymentBody = {
    payment_method: string;
};

export type PaymentStatus = 'Pending' | 'Paid' | 'Failed';

export type Product = {
    id: number;
    name: string;
    description: string;
    image_url: string;
    price: number;
    stock_quantity: number;
    created_at: string;
    brand: Brand;
    category: Category;
};

export type ProductBody = {
    name: string;
    description: string;
    image_url: string;
    price: number;
    stock_quantity: number;
    brand_id: number;
    category_id: number;
};

export type ReigsterUserBody = {
    email: string;
    password: string;
    first_name: string;
    last_name: string;
    street: string;
    postal_code: string;
    city: string;
    /**
     * Make new user admin, ONLY for testing purposes, would be removed in a real application
     */
    is_admin: boolean;
};

export type SortBy = 'Created' | 'Price' | 'Name';

export type SortDirection = 'Ascending' | 'Descending';

export type SpecificOrder = {
    id: number;
    order_date: string;
    total_price: number;
    status: OrderStatus;
    items: Array<OrderItem>;
    payment?: Payment;
};

export type PostUserRegisterData = {
    requestBody: ReigsterUserBody;
};

export type PostUserRegisterResponse = string;

export type PostUserLoginData = {
    requestBody: LoginUserBody;
};

export type PostUserLoginResponse = string;

export type GetCategoriesResponse = Array<Category>;

export type PostCategoriesData = {
    requestBody: CategoryBody;
};

export type PostCategoriesResponse = number;

export type GetCategoriesByIdData = {
    id: number;
};

export type GetCategoriesByIdResponse = Category;

export type PutCategoriesByIdData = {
    id: number;
    requestBody: CategoryBody;
};

export type PutCategoriesByIdResponse = void;

export type DeleteCategoriesByIdData = {
    id: number;
};

export type DeleteCategoriesByIdResponse = void;

export type GetBrandsResponse = Array<Brand>;

export type PostBrandsData = {
    requestBody: BrandBody;
};

export type PostBrandsResponse = number;

export type GetBrandsByIdData = {
    id: number;
};

export type GetBrandsByIdResponse = Brand;

export type PutBrandsByIdData = {
    id: number;
    requestBody: BrandBody;
};

export type PutBrandsByIdResponse = void;

export type DeleteBrandsByIdData = {
    id: number;
};

export type DeleteBrandsByIdResponse = void;

export type GetProductsData = {
    /**
     * Search products by name
     */
    search?: string;
    /**
     * Skip amount of products
     */
    skip?: number;
    /**
     * Sort products
     */
    sortBy?: SortBy & unknown;
    /**
     * Sort direction
     */
    sortDirection?: SortDirection & unknown;
    /**
     * Amount of products to query
     */
    take?: number;
};

export type GetProductsResponse = Array<Product>;

export type PostProductsData = {
    requestBody: ProductBody;
};

export type PostProductsResponse = number;

export type GetProductsByIdData = {
    id: number;
};

export type GetProductsByIdResponse = Product;

export type PutProductsByIdData = {
    id: number;
    requestBody: ProductBody;
};

export type PutProductsByIdResponse = void;

export type DeleteProductsByIdData = {
    id: number;
};

export type DeleteProductsByIdResponse = void;

export type GetOrdersResponse = Array<Order>;

export type PostOrdersData = {
    requestBody: OrderBody;
};

export type PostOrdersResponse = number;

export type GetOrdersByIdData = {
    id: number;
};

export type GetOrdersByIdResponse = SpecificOrder;

export type DeleteOrdersByIdData = {
    id: number;
};

export type DeleteOrdersByIdResponse = void;

export type PostOrdersByIdPayData = {
    id: number;
    requestBody: PaymentBody;
};

export type PostOrdersByIdPayResponse = unknown;

export type $OpenApiTs = {
    '/user/register': {
        post: {
            req: {
                requestBody: ReigsterUserBody;
            };
            res: {
                /**
                 * The user has been successfully registered, and authentication token is returned
                 */
                200: string;
                /**
                 * A user with the given email already exists
                 */
                409: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/user/login': {
        post: {
            req: {
                requestBody: LoginUserBody;
            };
            res: {
                /**
                 * Successfully logged in, and authentication token is returned
                 */
                200: string;
                /**
                 * Wrong email or password
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/categories': {
        get: {
            res: {
                200: Array<Category>;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        post: {
            req: {
                requestBody: CategoryBody;
            };
            res: {
                /**
                 * Returns the ID of the created category
                 */
                201: number;
                /**
                 * The user is not authorized to create a category
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/categories/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                200: Category;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        put: {
            req: {
                id: number;
                requestBody: CategoryBody;
            };
            res: {
                /**
                 * The category has been successfully updated
                 */
                204: void;
                /**
                 * The user is not authorized to update a category
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * The category has been successfully deleted
                 */
                204: void;
                /**
                 * The user is not authorized to delete a category
                 */
                401: unknown;
                /**
                 * The category with the given ID does not exist
                 */
                404: unknown;
                /**
                 * The category is in use and cannot be deleted
                 */
                409: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/brands': {
        get: {
            res: {
                200: Array<Brand>;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        post: {
            req: {
                requestBody: BrandBody;
            };
            res: {
                /**
                 * Returns the ID of the created brand
                 */
                201: number;
                /**
                 * The user is not authorized to create a brand
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/brands/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                200: Brand;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        put: {
            req: {
                id: number;
                requestBody: BrandBody;
            };
            res: {
                /**
                 * The brand has been successfully updated
                 */
                204: void;
                /**
                 * The user is not authorized to update a brand
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * The brand has been successfully deleted
                 */
                204: void;
                /**
                 * The user is not authorized to delete a brand
                 */
                401: unknown;
                /**
                 * The brand with the given ID does not exist
                 */
                404: unknown;
                /**
                 * The brand is in use and cannot be deleted
                 */
                409: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/products': {
        get: {
            req: {
                /**
                 * Search products by name
                 */
                search?: string;
                /**
                 * Skip amount of products
                 */
                skip?: number;
                /**
                 * Sort products
                 */
                sortBy?: SortBy & unknown;
                /**
                 * Sort direction
                 */
                sortDirection?: SortDirection & unknown;
                /**
                 * Amount of products to query
                 */
                take?: number;
            };
            res: {
                200: Array<Product>;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        post: {
            req: {
                requestBody: ProductBody;
            };
            res: {
                /**
                 * Returns the ID of the created product
                 */
                201: number;
                /**
                 * The user is not authorized to create a product
                 */
                401: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/products/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                200: Product;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        put: {
            req: {
                id: number;
                requestBody: ProductBody;
            };
            res: {
                /**
                 * The product has been successfully updated
                 */
                204: void;
                /**
                 * The user is not authorized to update a product
                 */
                401: unknown;
                /**
                 * The product does not exist
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * The product has been successfully deleted
                 */
                204: void;
                /**
                 * The user is not authorized to delete a product
                 */
                401: unknown;
                /**
                 * The product does not exist
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/orders': {
        get: {
            res: {
                200: Array<Order>;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        post: {
            req: {
                requestBody: OrderBody;
            };
            res: {
                /**
                 * Created order, returns the order id
                 */
                201: number;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/orders/{id}': {
        get: {
            req: {
                id: number;
            };
            res: {
                200: SpecificOrder;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
        delete: {
            req: {
                id: number;
            };
            res: {
                /**
                 * The order has been successfully deleted
                 */
                204: void;
                /**
                 * The user is not authorized to delete a order
                 */
                401: unknown;
                /**
                 * The order with the given ID does not exist
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
    '/orders/{id}/pay': {
        post: {
            req: {
                id: number;
                requestBody: PaymentBody;
            };
            res: {
                /**
                 * Payment successful
                 */
                201: unknown;
                /**
                 * Payment failed, the order is already paid for
                 */
                400: unknown;
                /**
                 * Order not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: string;
            };
        };
    };
};